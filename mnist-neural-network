import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop

___________________________________________

(x_train, y_train),(x_test, y_test) = mnist.load_data()
#conteudo da variavel xtrain
#print(x_train)
#tipo da variavel xtrain
#print(type(x_train))
#quantidade de itens da variavel xtrain
print(len(x_train))
print(len(y_train))
print(len(x_test))
print(len(y_test))

#formato de uma imagem
print(x_train[0].shape)

#exibir valor da variavel
print(x_train[0])

_________________________________________

#60000 - len(x_train)
#784 - 28 *28 (pixel de cada imagem)
x_train=x_train.reshape(60000, 784)
#10000 - len(x_test)
#784 - 28 *28 (pixel de cada imagem)
x_test=x_test.reshape(10000, 784)

x_train=x_train.astype('float32')
x_test=x_test.astype('float32')

#normaliza os valores de 0 atÈ 255 para 0 atÈ 1
x_train /= 255
x_test /= 255

#como o python entende o primeiro item de x_train
#print(x_train[0])

print(x_train.shape, 'train samples')
print(x_test.shape, 'test samples')

_________________________________________

#vamos ajustar o formato de saida
num_classes=10

#o que tem como informaÁ„o de saida
print(y_train[0])
print(y_train)

#for label in y_train:
#    print(label)

print(set(y_train))
print(len(set(y_train)))

y_train=keras.utils.to_categorical(y_train,num_classes)
y_test=keras.utils.to_categorical(y_test,num_classes)

_________________________________________________

#criando o modelo Sequential

model=Sequential()
model.add(Dense(30,activation='relu',input_shape=(784,)))
model.add(Dropout(0.2))
model.add(Dense(20, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))
model.summary()

____________________________________________

#treina modelo
model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy'])
batch_size=128
epochs=10

history=model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test))

_______________________________________

# testando prediction de valores
print(y_train[10])
print(model.predict(x_train[10].reshape((1,784))))
print(model.predict_classes(x_train[10].reshape((1,784))))

(x_train, y_train), (x_test, y_test) = mnist.load_data()
import matplotlib.pyplot as plt
%matplotlib inline
plt.imshow(x_train[10], cmap=plt.cm.binary)
plt.show()
